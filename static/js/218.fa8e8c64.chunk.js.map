{"version":3,"file":"static/js/218.fa8e8c64.chunk.js","mappings":"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","sources":["components/chat/HeaderChat.jsx","components/chat/navbar/UserMenuDropDown.jsx","components/chat/navbar/NavbarCurrentUser.jsx","components/chat/navbar/RegisteredUsers.jsx","components/chat/NavbarChat.jsx","components/messages/NonSelectedChat.jsx","components/chat/ChatLogic.jsx","pages/chat/Chat.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { IconBrandBadoo, IconBrightnessDown } from \"@tabler/icons\";\r\nimport { Burger } from \"@mantine/core\";\r\nimport { changeMode } from \"../../redux/slices/chatSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nexport default function HeaderChat({ setOpened }) {\r\n  const handleNavbar = () => {\r\n    setOpened((prev) => !prev);\r\n  };\r\n  const dispatch = useDispatch();\r\n  const darkModeState = useSelector((state) => state.darkMode);\r\n  return (\r\n    <header\r\n      className={\"header\" + (darkModeState ? \" elements-dark\" : \"\")}\r\n      style={{ borderBottom: \"1px solid #cccccc\" }}\r\n    >\r\n      <div className=\"header__logo-burger\">\r\n        <div className=\"logo\">\r\n          <IconBrandBadoo\r\n            color={darkModeState ? \"white\" : \"blue\"}\r\n            className=\"logo__img\"\r\n            size={30}\r\n          />\r\n          <div className=\"logo__text\">Chat-App</div>\r\n        </div>\r\n        <Burger\r\n          className=\"burger\"\r\n          color={darkModeState ? \"white\" : \"\"}\r\n          onClick={handleNavbar}\r\n        />\r\n      </div>\r\n      <div className=\"header__dark-switcher\">\r\n        <IconBrightnessDown\r\n          color={darkModeState ? \"white\" : \"blue\"}\r\n          size={40}\r\n          onClick={() => {\r\n            dispatch(changeMode());\r\n          }}\r\n        />\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Popover, Button } from \"@mantine/core\";\r\nimport { IconArrowNarrowRight } from \"@tabler/icons\";\r\nimport { auth } from \"../../../firebase\";\r\nimport { signOut } from \"firebase/auth\";\r\n\r\nconst signOutGoogle = () => {\r\n  signOut(auth)\r\n    .then(() => {\r\n      console.log(\"success\");\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"error\", error);\r\n    });\r\n};\r\n\r\nexport default function UserMenuDropDown() {\r\n  const [opened, setOpened] = useState(false);\r\n\r\n  return (\r\n    <Popover opened={opened} onChange={setOpened}>\r\n      <Popover.Target>\r\n        <div>\r\n          <IconArrowNarrowRight\r\n            className=\"arrow-logout\"\r\n            onClick={() => setOpened((o) => !o)}\r\n          />\r\n        </div>\r\n      </Popover.Target>\r\n\r\n      <Popover.Dropdown>\r\n        <Button color=\"red\" onClick={signOutGoogle}>\r\n          Log Out\r\n        </Button>\r\n      </Popover.Dropdown>\r\n    </Popover>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Avatar } from \"@mantine/core\";\r\nimport UserMenuDropDown from \"./UserMenuDropDown\";\r\nexport default function NavbarCurrentUser({ user }) {\r\n  return (\r\n    <div className=\"navbar-user\">\r\n      <div className=\"user\">\r\n        <Avatar\r\n          className=\"navbar-user__avatar item\"\r\n          src={user && user.photoURL}\r\n        />\r\n        <div className=\"navbar-user__info info-user item\">\r\n          <div className=\"info-user__name\">{user && user.displayName}</div>\r\n          <div className=\"info-user__email\">{user && user.email}</div>\r\n        </div>\r\n        <UserMenuDropDown />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Avatar } from \"@mantine/core\";\r\nimport { db } from \"../../../firebase\";\r\nimport {\r\n  collection,\r\n  onSnapshot,\r\n  orderBy,\r\n  query,\r\n  setDoc,\r\n  doc,\r\n  getDoc,\r\n} from \"firebase/firestore\";\r\nimport { auth } from \"../../../firebase\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getClickedUserUid } from \"../../../redux/slices/chatSlice\";\r\nexport default function RegisteredUsers({ setOpened }) {\r\n  const [users, setUsers] = useState([]);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    const q = query(collection(db, \"users\"), orderBy(\"timeStamp\"));\r\n    const unsubscribe = onSnapshot(q, (querySnapshot) => {\r\n      let users = [];\r\n      querySnapshot.forEach((user) => {\r\n        users.push({ ...user.data(), id: user.id });\r\n      });\r\n      setUsers(users);\r\n    });\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  const addChat = async (user) => {\r\n    const combinedUid =\r\n      auth.currentUser?.uid > user.uid\r\n        ? auth.currentUser?.uid + user.uid\r\n        : user.uid + auth.currentUser?.uid;\r\n\r\n    const res = await getDoc(doc(db, \"chats\", combinedUid));\r\n    if (!res.exists()) {\r\n      await setDoc(doc(db, \"chats\", combinedUid), { messages: [] });\r\n    }\r\n\r\n    dispatch(getClickedUserUid({ uid: combinedUid }));\r\n  };\r\n\r\n  const handleNavbarOpen = () => {\r\n    setOpened(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"registered-users\">\r\n      {users.map((user) =>\r\n        user.uid !== auth.currentUser?.uid ? (\r\n          <div\r\n            key={user.id}\r\n            className=\"registered-user\"\r\n            onClick={() => {\r\n              addChat(user);\r\n              handleNavbarOpen();\r\n            }}\r\n          >\r\n            <Avatar src={user?.icon} alt=\"avatar\" />\r\n            <div className=\"registered-user__info\">\r\n              <div className=\"registered-user__name\">{user.displayName}</div>\r\n              <div className=\"registered-user__email\">{user.email}</div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div key={user.id}></div>\r\n        )\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { auth } from \"../../firebase\";\r\nimport { useAuthState } from \"react-firebase-hooks/auth\";\r\nimport { Navigate } from \"react-router-dom\";\r\nimport NavbarCurrentUser from \"./navbar/NavbarCurrentUser\";\r\nimport RegisteredUsers from \"./navbar/RegisteredUsers\";\r\nimport { useSelector } from \"react-redux\";\r\nexport default function NavbarChat({ opened, setOpened }) {\r\n  const [user] = useAuthState(auth);\r\n  const darkModeState = useSelector((state) => state.darkMode);\r\n  return (\r\n    <div\r\n      className={\r\n        \"navbar\" +\r\n        (opened ? \" navbar-open\" : \"\") +\r\n        (darkModeState ? \" elements-dark\" : \"\")\r\n      }\r\n    >\r\n      <div className=\"nav-content\">\r\n        <RegisteredUsers setOpened={setOpened} />\r\n        <NavbarCurrentUser user={user} />\r\n      </div>\r\n      {!user && <Navigate replace to=\"/\" />}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function NonSelectedChat() {\r\n  return <div className=\"not-selected-chat\">Choose an chat</div>;\r\n}\r\n","import React, { useRef, lazy } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport NonSelectedChat from \"../messages/NonSelectedChat\";\r\nconst Board = lazy(() => import(\"../messages/Board\"));\r\nconst Form = lazy(() => import(\"../messages/Form\"));\r\nexport default function ChatLogic() {\r\n  const chatScroll = useRef(null);\r\n  const clickedUserUid = useSelector((u) => u.currentClickedUser);\r\n  const darkModeState = useSelector((state) => state.darkMode);\r\n  return (\r\n    <main className={darkModeState ? \" board-dark\" : \"\"}>\r\n      {clickedUserUid !== \"\" ? (\r\n        <>\r\n          <Board chatScroll={chatScroll} />\r\n          <Form chatScroll={chatScroll} />{\" \"}\r\n        </>\r\n      ) : (\r\n        <NonSelectedChat />\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport HeaderChat from \"../../components/chat/HeaderChat\";\r\nimport NavbarChat from \"../../components/chat/NavbarChat\";\r\n\r\nimport ChatLogic from \"../../components/chat/ChatLogic\";\r\n\r\nexport default function Chat() {\r\n  const [opened, setOpened] = useState(false);\r\n  return (\r\n    <div className=\"chat\">\r\n      <HeaderChat setOpened={setOpened} />\r\n      <NavbarChat opened={opened} setOpened={setOpened} />\r\n      <ChatLogic />\r\n    </div>\r\n  );\r\n}\r\n"],"names":["HeaderChat","setOpened","dispatch","useDispatch","darkModeState","useSelector","state","darkMode","className","style","borderBottom","color","size","Burger","onClick","prev","changeMode","signOutGoogle","signOut","auth","then","console","log","catch","error","UserMenuDropDown","useState","opened","Popover","onChange","o","Button","NavbarCurrentUser","user","Avatar","src","photoURL","displayName","email","RegisteredUsers","users","setUsers","useEffect","q","query","collection","db","orderBy","unsubscribe","onSnapshot","querySnapshot","forEach","push","data","id","addChat","combinedUid","uid","getDoc","doc","exists","setDoc","messages","getClickedUserUid","map","icon","alt","NavbarChat","useAuthState","replace","to","NonSelectedChat","Board","lazy","Form","ChatLogic","chatScroll","useRef","clickedUserUid","u","currentClickedUser","Chat"],"sourceRoot":""}